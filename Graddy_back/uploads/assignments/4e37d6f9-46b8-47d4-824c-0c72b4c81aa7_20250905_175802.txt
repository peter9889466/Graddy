========================================
Spring Boot + JavaScript CRUD 애플리케이션 과제
========================================

주제: Spring Boot를 사용하여 "책(Book)" 정보를 관리하는 RESTful API를 개발하고, JavaScript 프론트엔드에서 이를 연동하는 간단한 CRUD 애플리케이션 구현

----------------------------------------
문제 상황
----------------------------------------
Spring Boot를 활용하여 책 목록을 관리하는 RESTful API를 개발하세요. 
API는 책의 제목(title)과 저자(author)를 포함한 간단한 정보를 관리합니다. 
다음 작업을 수행할 수 있는 API 엔드포인트를 만드세요:

1. 책 추가 (Create)
2. 책 조회 (전체 및 개별 Read)
3. 책 수정 (Update)
4. 책 삭제 (Delete)

또한, JavaScript로 작성된 프론트엔드에서 이 API를 호출하여 데이터를 표시하고 조작할 수 있도록 하세요.

----------------------------------------
입력 예시
----------------------------------------
Add Book

----------------------------------------
예상 출력
----------------------------------------
Add Book

----------------------------------------
학습 목표
----------------------------------------
• Spring Boot를 활용하여 RESTful API를 설계하고 구현할 수 있다.  
• CRUD(Create, Read, Update, Delete) 기능의 전체 흐름을 이해한다.  
• JavaScript Fetch API를 활용하여 백엔드 API와 프론트엔드를 연동한다.  
• JSON 데이터를 주고받으며 동작하는 웹 애플리케이션의 기본 구조를 학습한다.  

----------------------------------------
요구사항
----------------------------------------
• Book 엔티티: id(Long), title(String), author(String)  
• RESTful API 구현:  
  - POST /books → 책 추가  
  - GET /books → 전체 책 목록 조회  
  - GET /books/{id} → 개별 책 조회  
  - PUT /books/{id} → 책 수정  
  - DELETE /books/{id} → 책 삭제  

• 프론트엔드(JavaScript)에서 Fetch API를 사용해 API 호출  
• HTML에서 결과를 테이블 형태로 출력 및 조작 가능  

----------------------------------------
기본 코드 구조 (Spring Boot)
----------------------------------------
@Entity
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
    private String author;

    // Getter, Setter
}

@Repository
public interface BookRepository extends JpaRepository<Book, Long> {}

@RestController
@RequestMapping("/books")
public class BookController {
    private final BookRepository repository;

    public BookController(BookRepository repository) {
        this.repository = repository;
    }

    @PostMapping
    public Book addBook(@RequestBody Book book) {
        return repository.save(book);
    }

    @GetMapping
    public List<Book> getAllBooks() {
        return repository.findAll();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Book> getBook(@PathVariable Long id) {
        return repository.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PutMapping("/{id}")
    public ResponseEntity<Book> updateBook(@PathVariable Long id, @RequestBody Book book) {
        return repository.findById(id)
                .map(existing -> {
                    existing.setTitle(book.getTitle());
                    existing.setAuthor(book.getAuthor());
                    return ResponseEntity.ok(repository.save(existing));
                })
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteBook(@PathVariable Long id) {
        if (repository.existsById(id)) {
            repository.deleteById(id);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.notFound().build();
    }
}

----------------------------------------
프론트엔드 예시 (JavaScript + HTML)
----------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Book CRUD</title>
</head>
<body>
  <h1>Book Management</h1>
  <div>
    <input id="title" placeholder="Book Title"/>
    <input id="author" placeholder="Author"/>
    <button onclick="addBook()">Add Book</button>
  </div>
  <table border="1" id="bookTable">
    <thead>
      <tr><th>ID</th><th>Title</th><th>Author</th><th>Action</th></tr>
    </thead>
    <tbody></tbody>
  </table>

  <script>
    const apiUrl = "http://localhost:8080/books";

    async function loadBooks() {
      const res = await fetch(apiUrl);
      const books = await res.json();
      const tbody = document.querySelector("#bookTable tbody");
      tbody.innerHTML = "";
      books.forEach(b => {
        const row = `<tr>
          <td>${b.id}</td>
          <td>${b.title}</td>
          <td>${b.author}</td>
          <td>
            <button onclick="deleteBook(${b.id})">Delete</button>
          </td>
        </tr>`;
        tbody.innerHTML += row;
      });
    }

    async function addBook() {
      const title = document.getElementById("title").value;
      const author = document.getElementById("author").value;
      await fetch(apiUrl, {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({title, author})
      });
      loadBooks();
    }

    async function deleteBook(id) {
      await fetch(`${apiUrl}/${id}`, { method: "DELETE" });
      loadBooks();
    }

    loadBooks();
  </script>
</body>
</html>