# .github/workflows/main.yml

name: Graddy Production CI/CD

on:
    push:
        branches: ["main"]

# 워크플로우에서 사용할 환경 변수를 중앙에서 관리합니다.
env:
    AWS_REGION: ap-northeast-1
    S3_BUCKET_NAME: mygraddybucket # 본인의 S3 버킷 이름
    CODE_DEPLOY_APP_NAME: graddy # CodeDeploy 애플리케이션 이름
    CODE_DEPLOY_GROUP_NAME: graddy # CodeDeploy 배포 그룹 이름

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            # 1. 코드 체크아웃
            - name: Checkout source code
              uses: actions/checkout@v4

            # 2. Docker Hub 로그인
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_TOKEN }}

            # 3. 백엔드(Backend) Docker 이미지 빌드 및 푸시
            - name: Build and push Backend image
              uses: docker/build-push-action@v5
              with:
                  context: ./Graddy_back
                  file: ./Graddy_back/Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/graddy-back:latest

            # 4. 프론트엔드(Frontend) Docker 이미지 빌드 및 푸시
            - name: Build and push Frontend image
              uses: docker/build-push-action@v5
              with:
                  context: ./Graddy_front
                  file: ./Graddy_front/Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/graddy-front:latest

            # 5. AWS 자격 증명 설정
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            # 6. 배포 패키지 생성
            - name: Create deployment package
              run: |
                  mkdir -p deploy
                  cp docker-compose.yml deploy/
                  cp appspec.yml deploy/
                  echo "DOCKER_HUB_ID=${{ secrets.DOCKER_HUB_USERNAME }}" > deploy/deploy.env
                  # [수정] scripts 폴더 복사를 확실하게
                  cp -r scripts deploy/
                  # 배포 패키지 내용 확인
                  echo "=== Deploy package contents ==="
                  ls -la deploy/
                  ls -la deploy/scripts/

            # 7. 배포 패키지를 zip으로 압축
            # deploy/ 디렉토리 내부의 파일들을 압축합니다.
            - name: Make zip file
              run: zip -r deploy.zip . -i deploy/*

            # 8. S3에 zip 파일 업로드
            - name: Upload zip to S3
              run: aws s3 cp deploy.zip s3://${{ env.S3_BUCKET_NAME }}/deploy.zip

            # 9. CodeDeploy 배포 트리거
            - name: Deploy to EC2 instance
              run: |
                  aws deploy create-deployment \
                    --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
                    --deployment-group-name ${{ env.CODE_DEPLOY_GROUP_NAME }} \
                    --s3-location bucket=${{ env.S3_BUCKET_NAME }},bundleType=zip,key=deploy.zip
