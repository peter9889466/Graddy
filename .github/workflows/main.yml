# .github/workflows/main.yml

name: Graddy Production CI/CD

on:
    push:
        branches: ["main"]

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

env:
    AWS_REGION: ap-northeast-1
    S3_BUCKET_NAME: mygraddybucket
    CODE_DEPLOY_APP_NAME: graddy
    CODE_DEPLOY_GROUP_NAME: graddy

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            # 1. 소스 코드 가져오기 (기존과 동일)
            - name: Checkout source code
              uses: actions/checkout@v4

            # 2. Docker Hub 로그인 (기존과 동일)
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_TOKEN }}

            # 2.5. Docker Buildx 설정 (기존과 동일)
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            # 3. 백엔드 이미지 빌드 및 푸시 (기존과 동일)
            - name: Build and push Backend image
              uses: docker/build-push-action@v5
              with:
                  context: ./Graddy_back
                  file: ./Graddy_back/Dockerfile
                  platforms: linux/arm64
                  push: true
                  tags: peter4855/graddy-back:latest
                  cache-from: type=gha
                  cache-to: type=gha

            # 3.5. FastAPI AI 서비스 이미지 빌드 및 푸시 (새로 추가)
            - name: Build and push FastAPI AI image
              uses: docker/build-push-action@v5
              with:
                  context: ./Graddy_back/scripts
                  file: ./Graddy_back/scripts/Dockerfile
                  platforms: linux/arm64
                  push: true
                  tags: peter4855/graddy-ai:latest
                  cache-from: type=gha
                  cache-to: type=gha

            # ===============================================================
            # (★★수정/추가된 부분 1: 프론트엔드 빌드 단계★★)
            # ===============================================================
            - name: Set up Node.js for Frontend
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: Build Frontend
              run: |
                  cd Graddy_front  # 프론트엔드 디렉토리로 이동
                  npm install      # 의존성 설치
                  npm run build    # build 폴더 생성

            # ===============================================================
            # (★★수정/추가된 부분 2: 배포 파일 압축 및 S3 업로드★★)
            # ===============================================================
            - name: Create deployment package
              run: |
                  # 배포에 필요한 파일들을 모을 deploy 디렉토리 생성
                  mkdir deploy

                  # 프론트엔드 빌드 결과물 복사
                  cp -r Graddy_front/dist ./deploy/

                  # CodeDeploy 설정 파일 및 스크립트 복사
                  cp appspec.yml ./deploy/
                  cp -r scripts ./deploy/

                  # 백엔드 실행을 위한 docker-compose.yml 파일 복사
                  cp docker-compose.yml ./deploy/

                  # deploy 디렉토리를 통째로 압축
                  cd deploy
                  zip -r ../deploy.zip .

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Upload to S3
              run: aws s3 cp deploy.zip s3://${{ env.S3_BUCKET_NAME }}/

            - name: Deploy to EC2
              run: |
                  aws deploy create-deployment \
                    --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
                    --deployment-group-name ${{ env.CODE_DEPLOY_GROUP_NAME }} \
                    --s3-location bucket=${{ env.S3_BUCKET_NAME }},bundleType=zip,key=deploy.zip
