# GitHub Actions 워크플로우의 이름을 지정합니다.
name: AWS EC2 CI/CD with Docker

# 워크플로우가 언제 실행될지를 정의합니다.
on:
    push:
        branches: ["main"]

# 워크플로우에 포함될 작업(job)들을 정의합니다.
jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            # 1. 코드 체크아웃
            - name: Checkout source code
              uses: actions/checkout@v4

            # 2. Docker Hub 로그인
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_TOKEN }}

            # 3. 백엔드(Backend) Docker 이미지 빌드 및 푸시
            - name: Build and push Backend image
              uses: docker/build-push-action@v5
              with:
                  context: ./Graddy_back
                  file: ./Graddy_back/Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/graddy-back:latest

            # 4. 프론트엔드(Frontend) Docker 이미지 빌드 및 푸시
            - name: Build and push Frontend image
              uses: docker/build-push-action@v5
              with:
                  context: ./Graddy_front
                  file: ./Graddy_front/Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/graddy-front:latest

            # 5. AWS 자격 증명 설정
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ap-northeast-1

            # 6. [추가된 부분] 배포 환경변수 파일 생성
            # start.sh 스크립트가 사용할 DOCKER_HUB_ID를 파일로 생성하여 zip에 포함시킵니다.
            - name: Make Environment file
              run: |
                  echo "DOCKER_HUB_ID=${{ secrets.DOCKER_HUB_USERNAME }}" > deploy.env

            # 7. 배포 파일을 zip으로 압축
            # deploy.env 파일을 포함하여 모든 배포 관련 파일을 압축합니다.
            - name: Make zip file
              run: zip -r deploy.zip . -x ".git/*" ".github/*"

            # 8. S3에 zip 파일 업로드
            - name: Upload zip to S3
              run: aws s3 cp deploy.zip s3://mygraddybucket/deploy.zip

            # 9. CodeDeploy 배포 트리거
            - name: Deploy to EC2 instance
              run: |
                  aws deploy create-deployment \
                    --application-name graddy \
                    --deployment-group-name graddy \
                    --s3-location bucket=mygraddybucket,bundleType=zip,key=deploy.zip
